{"ast":null,"code":"import _slicedToArray from \"/Users/danmagro/Desktop/Homework/google-books/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/danmagro/Desktop/Homework/google-books/client/src/pages/Search.js\";\nimport React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nfunction Search() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchInput = _useState4[0],\n      setSearchInput = _useState4[1];\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setSearchInput(value);\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (searchInput) {\n      API.searchBook(searchInput).then(function (res) {\n        // loadBooks()\n        console.log(res);\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ; //   function handleFormSubmit(event) {\n  //     event.preventDefault();\n  //     if (formObject.title && formObject.author) {\n  //       API.saveBook({\n  //         title: formObject.title,\n  //         author: formObject.author,\n  //         synopsis: formObject.synopsis\n  //       })\n  //         .then(res => loadBooks())\n  //         .catch(err => console.log(err));\n  //     }\n  //   };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, \"What Books Should I Read?\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"search\",\n    placeholder: \"Search (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"Submit Book\")))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, books.map(function (book) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/books/\" + book._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 23\n      }\n    }, book.title, \" by \", book.author)), /*#__PURE__*/React.createElement(DeleteBtn, {\n      onClick: function onClick() {\n        return deleteBook(book._id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\")));\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/danmagro/Desktop/Homework/google-books/client/src/pages/Search.js"],"names":["React","Jumbotron","Col","Row","Container","Input","FormBtn","Search","useState","books","setBooks","searchInput","setSearchInput","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","API","searchBook","then","res","console","log","catch","err","formObject","author","title","length","map","book","_id","deleteBook"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, FormBtn} from \"../components/Form\";\n\n\nfunction Search() {\n\n    const [books, setBooks] = useState([])\n    const [searchInput, setSearchInput] = useState({})\n\n    function handleInputChange(event) {\n        const { name, value } = event.target;\n        setSearchInput(value)\n      };\n    \n      // When the form is submitted, use the API.saveBook method to save the book data\n      // Then reload books from the database\n      function handleFormSubmit(event) {\n        event.preventDefault();\n        if (searchInput) {\n          API.searchBook(searchInput)\n            .then(res => {\n                // loadBooks()\n                console.log(res)\n            })\n\n        \n            .catch(err => console.log(err));\n        }\n      };\n    //   function handleFormSubmit(event) {\n    //     event.preventDefault();\n    //     if (formObject.title && formObject.author) {\n    //       API.saveBook({\n    //         title: formObject.title,\n    //         author: formObject.author,\n    //         synopsis: formObject.synopsis\n    //       })\n    //         .then(res => loadBooks())\n    //         .catch(err => console.log(err));\n    //     }\n    //   };\n    return (\n        <Container fluid>\n          <Row>\n          \n          <Col size=\"sm-12\">  \n          <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"search\"\n                placeholder=\"Search (required)\"\n              />\n              \n              <FormBtn\n                disabled={!(formObject.author && formObject.title)}\n                onClick={handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            \n            </form>  \n            </Col>\n            </Row>\n            <Row>\n            {books.length ? (\n              <List>\n                {books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n            </Row>\n            </Container>\n    )\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}